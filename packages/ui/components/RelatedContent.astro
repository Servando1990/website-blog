---
import type { ContentReference } from '../content-links';

export interface Props {
  title?: string;
  content: ContentReference[];
  maxItems?: number;
  className?: string;
}

const { 
  title = "Related Content", 
  content, 
  maxItems = 3,
  className = ""
} = Astro.props;

const displayContent = content.slice(0, maxItems);
---

{displayContent.length > 0 && (
  <section class={`related-content ${className}`}>
    <h3 class="related-content-title">{title}</h3>
    <ul class="related-content-list">
      {displayContent.map((item) => (
        <li class="related-content-item">
          <a 
            href={item.url} 
            class="related-content-link"
            title={item.description}
            target={item.type === 'external' ? '_blank' : '_self'}
            rel={item.type === 'external' ? 'noopener noreferrer' : undefined}
          >
            <h4 class="related-content-item-title">{item.title}</h4>
            {item.description && (
              <p class="related-content-item-description">{item.description}</p>
            )}
            <div class="related-content-meta">
              <span class={`content-type content-type-${item.type}`}>
                {item.type === 'blog-post' ? 'Blog Post' : 
                 item.type === 'website-page' ? 'Service Page' : 'External Link'}
              </span>
              {item.tags && item.tags.length > 0 && (
                <div class="content-tags">
                  {item.tags.slice(0, 2).map((tag) => (
                    <span class="content-tag">{tag}</span>
                  ))}
                </div>
              )}
            </div>
          </a>
        </li>
      ))}
    </ul>
  </section>
)}

<style>
  .related-content {
    margin: 2rem 0;
    padding: 1.5rem;
    border: 1px solid hsl(var(--border));
    border-radius: 0.5rem;
    background: hsl(var(--card));
  }

  .related-content-title {
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: hsl(var(--foreground));
  }

  .related-content-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .related-content-item {
    margin: 0;
  }

  .related-content-link {
    display: block;
    padding: 1rem;
    border: 1px solid hsl(var(--border));
    border-radius: 0.375rem;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s ease;
    background: hsl(var(--background));
  }

  .related-content-link:hover {
    border-color: hsl(var(--accent));
    background: hsl(var(--muted));
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .related-content-item-title {
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
    font-weight: 500;
    color: hsl(var(--foreground));
    line-height: 1.4;
  }

  .related-content-item-description {
    margin: 0 0 0.75rem 0;
    font-size: 0.875rem;
    color: hsl(var(--muted-foreground));
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .related-content-meta {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .content-type {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .content-type-blog-post {
    background: hsl(var(--accent) / 0.1);
    color: hsl(var(--accent));
  }

  .content-type-website-page {
    background: hsl(var(--primary) / 0.1);
    color: hsl(var(--primary));
  }

  .content-type-external {
    background: hsl(var(--muted));
    color: hsl(var(--muted-foreground));
  }

  .content-tags {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
  }

  .content-tag {
    font-size: 0.75rem;
    padding: 0.125rem 0.375rem;
    background: hsl(var(--secondary));
    color: hsl(var(--secondary-foreground));
    border-radius: 0.25rem;
    font-weight: 400;
  }

  /* Responsive design */
  @media (min-width: 768px) {
    .related-content-list {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1rem;
    }
  }
</style>